Private Members Using Symbols
-----------------------------
- Abstraction is one of the core principles of Object Oriented Programming (OOP)
    - It means hiding the details & complexity, showing ONLY the essential parts

    - To implement, use private properties and methods in an object
        - To hide certain members of an object
        - Make them INACCESSIBLE from the outside


- To use ES6 symbols implement abstraction
    - ES6 symbol is a primitive data type
        - It is essentially a unique identifier

    - The function Symbol() generates a symbol value
        - Everytime this function is called, a new unique identifier is generated
        - This is NOT a constructor function

    - Store symbol value to a constant PREFIXED with an underscore character
        - Perform this PRIOR the declaration of an ES6 class

    - Inside the ES6 class, use the computed property names along with the defined constant(s)
        - To define as identifiers for the private members (properties & methods) of the class


- To access or use a private members (property & method) from the outside, respectively
    - Use the computed name property name convention
    - Insert the name of the declared constant in-between the pair of [ ]


- Viewing the private members of an object
    - Returns the value "Symbol()" instead of the unique identifier stored in the constant(s)
